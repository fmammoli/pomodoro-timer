{"version":3,"sources":["components/Button/index.js","components/Countdown/index.js","components/TimerWrapper/index.js","globalStyle.js","App.js","reportWebVitals.js","index.js"],"names":["Button","styled","button","Countdown","workingIntervalDuration","React","useState","ms","setMs","timer","setTimer","timerActive","setTimerActive","workingTime","setWorkingTime","updateTimer","formattedTime","minutes","Math","floor","seconds","toFixed","msToMinutesAndSeconds","useEffect","initialTime","Date","now","intervalFnc","setInterval","accurateDelay","setTimeout","clearInterval","style","margin","color","textAlign","fontSize","display","justifyContent","onClick","icon","faPlay","faPause","faPlus","faStop","TimerWrapper","div","GlobalStyle","createGlobalStyle","App","console","log","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4KAkBeA,EAhBAC,IAAOC,OAAV,gR,qBCmIGC,EA9HG,WAEhB,IAAMC,EAA0B,KAFV,EAMAC,IAAMC,SAASF,GANf,mBAMdG,EANc,KAMVC,EANU,OAOMH,IAAMC,SAAS,MAPrB,mBAOdG,EAPc,KAOPC,EAPO,OAUkBL,IAAMC,UAAS,GAVjC,mBAUdK,EAVc,KAUDC,EAVC,OAakBP,IAAMC,UAAS,GAbjC,mBAadO,EAbc,KAaDC,EAbC,KAqBtB,SAASC,EAAYR,GACnB,IAAMS,EAPR,SAA+BT,GAC7B,IAAIU,EAAUC,KAAKC,MAAMZ,EAAK,KAC1Ba,GAAYb,EAAK,IAAS,KAAMc,QAAQ,GAC5C,OAAQJ,EAAU,GAAK,IAAM,IAAOA,EAAU,KAAOG,EAAU,GAAK,IAAM,IAAMA,EAI1DE,CAAsBf,GAC5CG,EAASM,GAoEX,OAhEAX,IAAMkB,WAAW,WACfR,EAAYR,KACX,IAGHF,IAAMkB,WAAW,WAEf,GAAGZ,EAAa,CACd,IAAMa,EAAcC,KAAKC,MACnBC,EAAcC,aAAc,WAChC,IACMC,EADcJ,KAAKC,MACWF,EAIpC,GAFAhB,GAAO,SAAAD,GAAE,OAAIA,EAAKsB,KAEdtB,GAAM,EAUR,OATAQ,EAAY,GAEVP,EADEK,EAzCiB,IA4CbT,QAER0B,YAAY,WACVhB,GAAgBD,KACf,KAGLE,EAAYR,KAGX,KAEH,OAAO,WACLwB,cAAcJ,IAGhBZ,EAAYR,KAEb,CAACI,EAAaJ,IA2Bf,qCAEE,mBAAGyB,MAAO,CAAEC,OAAQ,IAAKC,MAAO,SAAUC,UAAW,UAArD,SACGtB,EAAc,OAAS,SAG1B,mBAAGmB,MAAO,CAAEC,OAAQ,SAAUG,SAAU,MAAOD,UAAW,UAA1D,SACG1B,IAGH,sBAAKuB,MAAO,CAAEC,OAAQ,SAAUI,QAAS,OAAQC,eAAgB,UAAjE,UACE,cAAC,EAAD,CAAQC,QAnCd,WACM5B,IACFH,GAAO,SAAAD,GAAE,OAAIA,EAAK,OAClBQ,EAAYR,IAEdK,GAAe,IA8BX,SACE,cAAC,IAAD,CAAiB4B,KAAMC,QAGzB,cAAC,EAAD,CAAQF,QA/Bd,WACE3B,GAAe,IA8BX,SACE,cAAC,IAAD,CAAiB4B,KAAME,QAGzB,cAAC,EAAD,CAAQH,QA/Bd,WACE/B,GAAM,SAACD,GAAD,OAAQA,EAAK,QA8Bf,SACE,cAAC,IAAD,CAAiBiC,KAAMG,QAGzB,cAAC,EAAD,CAAQJ,QA/Bd,WACE3B,GAAe,GACfJ,EAAMJ,GACNW,EAAYX,GACZU,GAAe,IA2BX,SACE,cAAC,IAAD,CAAiB0B,KAAMI,eCvGlBC,EAlBM5C,IAAO6C,IAAV,uYCkBHC,EAlBKC,YAAH,gXCkBFC,MAff,WAIE,OAFAC,QAAQC,IAAI,SAGV,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,UACE,cAAC,EAAD,UCDOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6935818b.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  width: 40px;\r\n  height: 40px;\r\n  background-color: tomato;\r\n  border-color: tomato;\r\n  color: #fff;\r\n  font-size: 12px;\r\n  text-align: center;\r\n  line-height: 30px;\r\n  margin: 1px;\r\n  //border-radius: 50%;\r\n  &:focus {\r\n    outline: 0;\r\n  }\r\n`;\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from '../Button';\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPause, faPlay, faPlus, faStop } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nconst Countdown = () => {\r\n\r\n  const workingIntervalDuration = 25*60*1000;\r\n  const restIntervalDuration = 5*60*1000; \r\n  \r\n  //const [ ms, setMs ] = React.useState(25*60*1000);\r\n  const [ ms, setMs ] = React.useState(workingIntervalDuration);\r\n  const [ timer, setTimer ] = React.useState(null);\r\n\r\n  // flag para saber se já está rodando o timer\r\n  const [ timerActive, setTimerActive ] = React.useState(false); \r\n\r\n  // status: work or rest\r\n  const [ workingTime, setWorkingTime ] = React.useState(true);\r\n\r\n  function msToMinutesAndSeconds(ms) {\r\n    var minutes = Math.floor(ms / 60000);\r\n    var seconds = ((ms % 60000) / 1000).toFixed(0);\r\n    return (minutes < 10 ? '0' : '' ) + minutes + \":\" + (seconds < 10 ? '0' : '') + seconds;\r\n  }\r\n\r\n  function updateTimer(ms) {\r\n    const formattedTime = msToMinutesAndSeconds(ms);\r\n    setTimer(formattedTime);\r\n  }\r\n\r\n\r\n  React.useEffect( () => {\r\n    updateTimer(ms);\r\n  }, []);\r\n \r\n\r\n  React.useEffect( () => {\r\n\r\n    if(timerActive) {\r\n      const initialTime = Date.now();\r\n      const intervalFnc = setInterval ( ()=>{\r\n        const currentTime = Date.now();        \r\n        const accurateDelay = currentTime - initialTime;\r\n       \r\n        setMs( ms => ms - accurateDelay);\r\n\r\n        if( ms <= 0) {\r\n          updateTimer(0);\r\n          if( workingTime ) { \r\n            setMs(restIntervalDuration);\r\n          } else {\r\n            setMs(workingIntervalDuration);\r\n          }\r\n          setTimeout( () => {\r\n            setWorkingTime(!workingTime)\r\n          }, 1000);\r\n          return;\r\n        }\r\n        updateTimer(ms);\r\n        \r\n\r\n      }, 1000);\r\n\r\n      return () => {\r\n        clearInterval(intervalFnc);\r\n      }\r\n    } else {\r\n      updateTimer(ms);\r\n    }\r\n  }, [timerActive, ms])\r\n\r\n  \r\n  function startTimer() {\r\n    if(!timerActive) {\r\n      setMs( ms => ms - 1000 );\r\n      updateTimer(ms);\r\n    }\r\n    setTimerActive(true);\r\n  }\r\n   \r\n  function pauseTimer() {\r\n    setTimerActive(false);\r\n  }\r\n\r\n  function addOneMin() {\r\n    setMs((ms) => ms + 60000);\r\n  }\r\n  \r\n  function stopTimer() {\r\n    setTimerActive(false);\r\n    setMs(workingIntervalDuration);\r\n    updateTimer(workingIntervalDuration);\r\n    setWorkingTime(true);\r\n  }\r\n\r\n  return (\r\n    <> \r\n\r\n      <p style={{ margin: '0' ,color: 'tomato', textAlign: 'center'}}>\r\n        {workingTime ? 'work' : 'rest'}\r\n      </p>\r\n\r\n      <p style={{ margin: '70px 0', fontSize: '5em', textAlign: 'center' }}>\r\n        {timer}\r\n      </p>\r\n\r\n      <div style={{ margin: '20px 0', display: 'flex', justifyContent: 'center'}}>\r\n        <Button onClick={startTimer} >\r\n          <FontAwesomeIcon icon={faPlay} />\r\n        </Button>\r\n\r\n        <Button onClick={pauseTimer} >\r\n          <FontAwesomeIcon icon={faPause} />\r\n        </Button>\r\n        \r\n        <Button onClick={addOneMin} >\r\n          <FontAwesomeIcon icon={faPlus} />\r\n        </Button>\r\n\r\n        <Button onClick={stopTimer} >\r\n          <FontAwesomeIcon icon={faStop} />\r\n        </Button>\r\n\r\n      </div>\r\n      \r\n    </>\r\n  )\r\n\r\n}\r\n\r\nexport default Countdown;","import styled from 'styled-components';\r\n\r\nconst TimerWrapper = styled.div`\r\n  width: 350px;\r\n  height: 80vh;\r\n  background-color: #1a1a42;\r\n  box-shadow: 0px 0px 5px 2px rgba(0,0,0,0.5);\r\n  /* padding: 20px; */\r\n  margin: auto;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  @media only screen and (max-width: 768px) {\r\n    width: 100vw;\r\n    height: 100vh;\r\n    padding: 15px 0;\r\n  }\r\n`;\r\n\r\nexport default TimerWrapper;","import { createGlobalStyle } from 'styled-components';\r\n \r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    background-image: linear-gradient( #1a1a42, #151535 );\r\n    font-family: 'Cutive Mono', monospace;\r\n    color: #fff;\r\n    min-height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;","import React from 'react';\nimport Countdown from './components/Countdown';\nimport TimerWrapper from './components/TimerWrapper';\nimport GlobalStyle from './globalStyle';\n\nfunction App() {\n\n  console.log('teste');\n  \n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <TimerWrapper>\n        <Countdown/>\n      </TimerWrapper>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}