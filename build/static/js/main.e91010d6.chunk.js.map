{"version":3,"sources":["components/Button/index.js","hooks/useCount/useAnimationFrame.js","hooks/useCount/index.js","components/Clock/index.js","components/Countdown/index.js","components/GitHubCorner/index.js","components/TimerWrapper/index.js","globalStyle.js","App.js","reportWebVitals.js","index.js"],"names":["Button","styled","button","useAnimationFrame","ms","callback","callbackRef","useRef","useEffect","current","controller","AbortController","signal","start","document","timeline","currentTime","frame","time","aborted","scheduleFrame","elapsed","roundedElapsed","Math","round","delay","performance","now","setTimeout","requestAnimationFrame","animationInterval","abort","useCount","duration","useState","countDuration","setCountDuration","roundElapsedTime","setRoundElapsedTime","startTime","setStartTime","pausedTime","setPausedTime","setCurrentTime","additionalMinutes","setAdditionalMinutes","isActive","setActive","done","setDone","roundElapsed","console","log","newDuration","ClockWrapper","div","Clock","minutes","seconds","String","padStart","split","minuteLeft","minuteRight","secondLeft","secondRight","Countdown","workingIntervalDuration","transientDuration","setTransientDuration","pause","addOne","stop","style","margin","color","textAlign","elapsedTime","floor","toFixed","msToMinutesAndSeconds","width","display","justifyContent","onClick","icon","faPlay","faPause","faPlus","faStop","Wrapper","SVGWrapper","svg","GitHubCorner","projectUrl","href","target","rel","className","height","viewBox","aria-hidden","d","fill","transformOrigin","TimerWrapper","GlobalStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e91010d6.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n  width: 3rem;\r\n  height: 3rem;\r\n  background-color: tomato;\r\n  border-color: tomato;\r\n  color: #fff;\r\n  font-size: 1rem;\r\n  text-align: center;\r\n  line-height: 1.5rem;\r\n  cursor: pointer;\r\n  //border-radius: 50%;\r\n  &:focus {\r\n    outline: 0;\r\n  }\r\n`;\r\n\r\nexport default Button;\r\n","import { useEffect, useRef } from \"react\";\r\n\r\n// Eternal ticking....\r\nfunction animationInterval(ms, signal, callback) {\r\n  const start = document.timeline.currentTime;\r\n\r\n  function frame(time) {\r\n    if (signal.aborted) return;\r\n    //callback(time, start);\r\n    scheduleFrame(time);\r\n  }\r\n\r\n  function scheduleFrame(time) {\r\n    const elapsed = time - start;\r\n    const roundedElapsed = Math.round(elapsed / ms) * ms;\r\n    callback(time, elapsed, roundedElapsed);\r\n    //console.log(roundedElapsed / 1000);\r\n    const targetNext = start + roundedElapsed + ms;\r\n    const delay = targetNext - performance.now();\r\n    setTimeout(() => requestAnimationFrame(frame), delay);\r\n  }\r\n\r\n  scheduleFrame(start);\r\n}\r\n\r\n// Um hook para usar aquela função.\r\n// Seria legal colocar aquela função dentro do react,\r\n// mas não entendi como fazer isso.\r\n// Talvez seja melhor fora, sei la.\r\nconst useAnimationFrame = (ms, callback) => {\r\n  const callbackRef = useRef(callback);\r\n\r\n  useEffect(() => {\r\n    callbackRef.current = callback;\r\n  }, [callback]);\r\n\r\n  useEffect(() => {\r\n    const controller = new AbortController();\r\n    animationInterval(ms, controller.signal, callbackRef.current);\r\n    return () => controller.abort();\r\n  }, [ms]);\r\n};\r\n\r\nexport default useAnimationFrame;\r\n","import { useState, useEffect } from \"react\";\r\nimport useAnimationFrame from \"./useAnimationFrame\";\r\n\r\n// A hook for counting\r\n// Usage:\r\n//      import useCount from \"\"\r\n//      const [currentTime, isActive, done, start, pause, stop] = useCount(60 * 1000);\r\n\r\nfunction useCount(duration) {\r\n  const [countDuration, setCountDuration] = useState(duration);\r\n  // const [time, setTime] = useState(0);\r\n  // const [elapsedTime, setElapsedTime] = useState(0);\r\n  const [roundElapsedTime, setRoundElapsedTime] = useState(0);\r\n\r\n  const [startTime, setStartTime] = useState(0);\r\n  const [pausedTime, setPausedTime] = useState(0);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [additionalMinutes, setAdditionalMinutes] = useState(0);\r\n\r\n  const [isActive, setActive] = useState(false);\r\n\r\n  const [done, setDone] = useState(false);\r\n\r\n  function getTimeData(time, elapsed, roundElapsed) {\r\n    // Start is always Zero\r\n    //setStartTime(start);\r\n    // setTime(time);\r\n    // setElapsedTime(elapsed);\r\n    setRoundElapsedTime(roundElapsed);\r\n  }\r\n\r\n  const interval = 1000;\r\n  useAnimationFrame(interval, getTimeData);\r\n\r\n  useEffect(() => {\r\n    // console.log(\"Time: \" + roundElapsedTime);\r\n    // console.log(\"Cronometro comecou em: \" + startTime);\r\n    // console.log(\"Cronometro Time atual: \" + currentTime);\r\n\r\n    if (!isActive) {\r\n      setStartTime(roundElapsedTime);\r\n    } else {\r\n      setCurrentTime(roundElapsedTime - startTime + pausedTime);\r\n    }\r\n    // O mais correto seria colocar o startTime tambem nas dependencias,\r\n    // mas fazendo isso ele roda o useEffect duas vezes, nao entendi pq.\r\n    // Tirando ele também da certo, mas na hora que entra no useEffect\r\n    // ele esta com o valor da renderizacao anterior.\r\n  }, [roundElapsedTime, startTime, pausedTime]);\r\n\r\n  useEffect(() => {\r\n    if (isActive) {\r\n      if (currentTime >= countDuration) {\r\n        setAdditionalMinutes(0);\r\n        setDone(true);\r\n        setActive(false);\r\n      }\r\n    }\r\n  }, [currentTime]);\r\n\r\n  function start() {\r\n    if (!isActive) {\r\n      const additionalMinutesToMilliseconds = additionalMinutes * 60 * 1000;\r\n      setStartTime(roundElapsedTime + additionalMinutesToMilliseconds);\r\n      setActive(true);\r\n    }\r\n    console.log(currentTime);\r\n  }\r\n\r\n  function pause() {\r\n    if (isActive) {\r\n      setStartTime(roundElapsedTime);\r\n      setPausedTime(currentTime);\r\n      setActive(false);\r\n    }\r\n  }\r\n\r\n  function addOne() {\r\n    if (isActive) {\r\n      setStartTime(roundElapsedTime - currentTime + 60 * 1000);\r\n    } else {\r\n      setCurrentTime(currentTime - 60 * 1000);\r\n      setAdditionalMinutes(additionalMinutes + 1);\r\n    }\r\n  }\r\n\r\n  function stop(newDuration) {\r\n    //setStartTime(roundElapsedTime);\r\n    setPausedTime(0);\r\n    setCurrentTime(0);\r\n    setAdditionalMinutes(0);\r\n    setCountDuration(newDuration);\r\n    setActive(false);\r\n  }\r\n  return [\r\n    currentTime,\r\n    isActive,\r\n    done,\r\n    start,\r\n    pause,\r\n    addOne,\r\n    stop,\r\n    setCountDuration,\r\n  ];\r\n}\r\nexport default useCount;\r\n","import styled from \"styled-components\";\r\n\r\nconst ClockWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  font-weight: 600;\r\n  font-family: \"Rajdhani\";\r\n  /* color: #1a1a42; */\r\n\r\n  & > div {\r\n    flex: 1;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-evenly;\r\n    background: tomato;\r\n    border-radius: 3px;\r\n    font-size: 4rem;\r\n    text-align: center;\r\n  }\r\n  & > div span {\r\n    display: block;\r\n    width: 3.2rem;\r\n    flex: 1;\r\n  }\r\n  & > div span:first-child {\r\n    border-right: 1px solid #1a1a42;\r\n  }\r\n  & > div span:last-child {\r\n    border-left: 1px solid #1a1a42;\r\n  }\r\n  & > span {\r\n    font-size: 3rem;\r\n    margin: 0 0.5rem;\r\n    color: tomato;\r\n  }\r\n`;\r\n\r\nexport function Clock({ time }) {\r\n  const [minutes, seconds] = time;\r\n\r\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, \"0\").split(\"\");\r\n  const [secondLeft, secondRight] = String(seconds).padStart(2, \"0\").split(\"\");\r\n\r\n  return (\r\n    <ClockWrapper>\r\n      <div>\r\n        <span>{minuteLeft}</span>\r\n        <span>{minuteRight}</span>\r\n      </div>\r\n      <span>:</span>\r\n      <div>\r\n        <span>{secondLeft}</span>\r\n        <span>{secondRight}</span>\r\n      </div>\r\n    </ClockWrapper>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport Button from \"../Button\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faPause,\r\n  faPlay,\r\n  faPlus,\r\n  faStop,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport useCount from \"../../hooks/useCount\";\r\nimport { Clock } from \"../Clock\";\r\n\r\nconst Countdown = () => {\r\n  const workingIntervalDuration = 0.5 * 60 * 1000;\r\n  const restIntervalDuration = 5 * 60 * 1000;\r\n\r\n  const [transientDuration, setTransientDuration] = useState(\r\n    workingIntervalDuration\r\n  );\r\n\r\n  const [\r\n    currentTime,\r\n    isActive,\r\n    done,\r\n    start,\r\n    pause,\r\n    addOne,\r\n    stop,\r\n    setCountDuration,\r\n  ] = useCount(workingIntervalDuration);\r\n\r\n  useEffect(() => {\r\n    console.log(\"Done!!!: \" + done);\r\n  }, [done]);\r\n\r\n  function msToMinutesAndSeconds(elapsedTime) {\r\n    const ms = transientDuration - elapsedTime;\r\n    const minutes = Math.floor(ms / 60000);\r\n    const seconds = ((ms % 60000) / 1000).toFixed(0);\r\n    // to avoid bugs\r\n    if (seconds === 60) {\r\n      minutes = minutes + 1;\r\n      seconds = 0;\r\n    }\r\n\r\n    return [minutes, seconds];\r\n  }\r\n\r\n  function startTimer() {\r\n    start();\r\n  }\r\n\r\n  function pauseTimer() {\r\n    pause();\r\n  }\r\n\r\n  function addOneMin() {\r\n    // setCountDuration((prevDuration) => {\r\n    //   const newDuration = prevDuration + 60 * 1000;\r\n    //   console.log(newDuration);\r\n    //   setTransientDuration(newDuration);\r\n    //   return newDuration;\r\n    // });\r\n\r\n    addOne();\r\n  }\r\n\r\n  function stopTimer() {\r\n    stop(workingIntervalDuration);\r\n    setTransientDuration(workingIntervalDuration);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <p style={{ margin: \"0\", color: \"tomato\", textAlign: \"center\" }}>\r\n        {/* {workingTime ? \"work\" : \"rest\"} */}\r\n      </p>\r\n\r\n      <Clock time={msToMinutesAndSeconds(currentTime)} />\r\n\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          margin: \"20px 0\",\r\n          display: \"flex\",\r\n          justifyContent: \"space-between\",\r\n        }}\r\n      >\r\n        <Button onClick={startTimer}>\r\n          <FontAwesomeIcon icon={faPlay} />\r\n        </Button>\r\n\r\n        <Button onClick={pauseTimer}>\r\n          <FontAwesomeIcon icon={faPause} />\r\n        </Button>\r\n\r\n        <Button onClick={addOneMin}>\r\n          <FontAwesomeIcon icon={faPlus} />\r\n        </Button>\r\n\r\n        <Button onClick={stopTimer}>\r\n          <FontAwesomeIcon icon={faStop} />\r\n        </Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Countdown;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  border: 0;\r\n  right: 0;\r\n  z-index: 20;\r\n`;\r\n\r\nconst SVGWrapper = styled.svg`\r\n  fill: tomato;\r\n  color: #1a1a42;\r\n  cursor: pointer;\r\n  &:hover .octo-arm{\r\n    animation:octocat-wave 560ms ease-in-out\r\n  }\r\n  @keyframes octocat-wave{\r\n    0%,100%{transform:rotate(0)}\r\n    20%,60%{transform:rotate(-25deg)}\r\n    40%,80%{transform:rotate(10deg)}\r\n  }\r\n  @media (max-width:500px){\r\n    &:hover .octo-arm{\r\n      animation:none\r\n    }\r\n    & .octo-arm{\r\n      animation:octocat-wave 560ms ease-in-out\r\n    }\r\n  }\r\n`;\r\n\r\n// eslint-disable-next-line react/prop-types\r\nexport default function GitHubCorner({ projectUrl }) {\r\n  return (\r\n    <Wrapper>\r\n      <a href={projectUrl} target=\"_blank\" rel=\"noreferrer\">\r\n        <SVGWrapper className=\"githubCorner\" width=\"80\" height=\"80\" viewBox=\"0 0 250 250\" aria-hidden=\"true\">\r\n          <path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\" />\r\n          <path d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\" fill=\"currentColor\" style={{ transformOrigin: '130px 106px' }} className=\"octo-arm\" />\r\n          <path d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\" fill=\"currentColor\" className=\"octo-body\" />\r\n        </SVGWrapper>\r\n      </a>\r\n    </Wrapper>\r\n  );\r\n}","import styled from \"styled-components\";\r\n\r\nconst TimerWrapper = styled.div`\r\n  width: 350px;\r\n  height: 80vh;\r\n  background-color: #1a1a42;\r\n  box-shadow: 0px 0px 5px 2px rgba(0, 0, 0, 0.5);\r\n  /* padding: 20px; */\r\n  margin: auto;\r\n  padding: 0 60px;\r\n\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n\r\n  @media only screen and (max-width: 768px) {\r\n    width: 100vw;\r\n    height: 100vh;\r\n    padding: 15px 80px;\r\n  }\r\n`;\r\n\r\nexport default TimerWrapper;\r\n","import { createGlobalStyle } from 'styled-components';\r\n \r\nconst GlobalStyle = createGlobalStyle`\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n  body {\r\n    margin: 0;\r\n    padding: 0;\r\n    background-image: linear-gradient( #1a1a42, #151535 );\r\n    font-family: 'Cutive Mono', monospace;\r\n    color: #fff;\r\n    min-height: 100vh;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;","import React from 'react';\nimport Countdown from './components/Countdown';\nimport GitHubCorner from './components/GitHubCorner';\nimport TimerWrapper from './components/TimerWrapper';\nimport GlobalStyle from './globalStyle';\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <GitHubCorner projectUrl='https://github.com/heyralfs/pomodoro-timer' />\n      <TimerWrapper>\n        <Countdown/>\n      </TimerWrapper>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <>\r\n    <App />\r\n  </>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}