{"version":3,"sources":["components/Button/index.js","components/Countdown/index.js","App.js","reportWebVitals.js","index.js"],"names":["Button","styled","button","Countdown","React","useState","ms","setMs","timer","setTimer","intervalRef","useRef","pauseTimer","clearInterval","current","undefined","useEffect","formattedTime","minutes","Math","floor","seconds","toFixed","msToMinutesAndSeconds","style","fontSize","textAlign","display","justifyContent","onClick","setInterval","icon","faPlay","faPause","faPlus","faStop","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mKAkBeA,E,MAhBAC,EAAOC,OAAV,8Q,qBC0EGC,EArEG,WAAO,IAAD,EAEAC,IAAMC,SAAS,MAFf,mBAEdC,EAFc,KAEVC,EAFU,OAGMH,IAAMC,SAAS,MAHrB,mBAGdG,EAHc,KAGPC,EAHO,KAIhBC,EAAcN,IAAMO,SAuB1B,SAASC,IACPC,cAAcH,EAAYI,SAC1BJ,EAAYI,aAAUC,EAYxB,OA7BAX,IAAMY,WAAW,WAEf,IAAMC,EARR,SAA+BX,GAC7B,IAAIY,EAAUC,KAAKC,MAAMd,EAAK,KAC1Be,GAAYf,EAAK,IAAS,KAAMgB,QAAQ,GAC5C,OAAOJ,EAAU,KAAOG,EAAU,GAAK,IAAM,IAAMA,EAK7BE,CAAsBjB,GAC5CG,EAASQ,KAER,CAACX,IAyBF,qCAEE,oBAAIkB,MAAO,CAAEC,SAAU,MAAOC,UAAW,UAAzC,SAAqDlB,IAErD,sBAAKgB,MAAO,CAAEG,QAAS,OAAQC,eAAgB,UAA/C,UACE,cAAC,EAAD,CAAQC,QA5Bd,WACOnB,EAAYI,UACfJ,EAAYI,QAAUgB,aAAa,WACjCvB,GAAM,SAACD,GAAD,OAAQA,EAAG,SAChB,OAwBD,SACE,cAAC,IAAD,CAAiByB,KAAMC,QAGzB,cAAC,EAAD,CAAQH,QAASjB,EAAjB,SACE,cAAC,IAAD,CAAiBmB,KAAME,QAGzB,cAAC,EAAD,CAAQJ,QAvBd,WACEtB,GAAM,SAACD,GAAD,OAAQA,EAAK,QAsBf,SACE,cAAC,IAAD,CAAiByB,KAAMG,QAGzB,cAAC,EAAD,CAAQL,QAvBd,WACEjB,IACAL,EAAM,OAqBF,SACE,cAAC,IAAD,CAAiBwB,KAAMI,eCrDlBC,MAXf,WAEE,OACE,qBAAKC,UAAU,MAAf,SAEE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c575d8c1.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  width: 60px;\r\n  height: 60px;\r\n  background-color: tomato;\r\n  border-color: tomato;\r\n  color: #fff;\r\n  font-size: 15px;\r\n  text-align: center;\r\n  line-height: 30px;\r\n  margin: 5px;\r\n  border-radius: 50%;\r\n  &:focus {\r\n    outline: 0;\r\n  }\r\n`;\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from '../Button';\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPause, faPlay, faPlus, faStop } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nconst Countdown = () => {\r\n  \r\n  const [ ms, setMs ] = React.useState(25*60*1000);\r\n  const [ timer, setTimer ] = React.useState(null);\r\n  const intervalRef = React.useRef();\r\n  \r\n  function msToMinutesAndSeconds(ms) {\r\n    var minutes = Math.floor(ms / 60000);\r\n    var seconds = ((ms % 60000) / 1000).toFixed(0);\r\n    return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds;\r\n  }\r\n  \r\n  React.useEffect( () => {\r\n    //formata em mm:ss\r\n    const formattedTime = msToMinutesAndSeconds(ms);\r\n    setTimer(formattedTime);\r\n  \r\n  }, [ms])\r\n  \r\n  function startTimer() {\r\n    if (!intervalRef.current) {\r\n      intervalRef.current = setInterval( () => {\r\n        setMs((ms) => ms-1000)\r\n      }, 1 * 1000)\r\n    }\r\n  }\r\n   \r\n  function pauseTimer() {\r\n    clearInterval(intervalRef.current);\r\n    intervalRef.current = undefined;\r\n  }\r\n\r\n  function addOneMin() {\r\n    setMs((ms) => ms + 60000);\r\n  }\r\n  \r\n  function stopTimer() {\r\n    pauseTimer();\r\n    setMs(25*60*1000);\r\n  }\r\n\r\n  return (\r\n    <> \r\n\r\n      <h1 style={{ fontSize: '6em', textAlign: 'center'}}>{timer}</h1>\r\n\r\n      <div style={{ display: 'flex', justifyContent: 'center'}}>\r\n        <Button onClick={startTimer} >\r\n          <FontAwesomeIcon icon={faPlay} />\r\n        </Button>\r\n\r\n        <Button onClick={pauseTimer} >\r\n          <FontAwesomeIcon icon={faPause} />\r\n        </Button>\r\n        \r\n        <Button onClick={addOneMin} >\r\n          <FontAwesomeIcon icon={faPlus} />\r\n        </Button>\r\n\r\n        <Button onClick={stopTimer} >\r\n          <FontAwesomeIcon icon={faStop} />\r\n        </Button>\r\n      </div>\r\n      \r\n    </>\r\n  )\r\n\r\n}\r\n\r\nexport default Countdown;","import React from 'react';\nimport Countdown from './components/Countdown';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n\n      <Countdown/>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}