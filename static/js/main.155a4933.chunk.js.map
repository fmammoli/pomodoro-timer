{"version":3,"sources":["components/Button/index.js","components/Countdown/index.js","App.js","reportWebVitals.js","index.js"],"names":["Button","styled","button","Countdown","React","useState","ms","setMs","timer","setTimer","timerActive","setTimerActive","initialTime","useRef","intervalRef","updateTimer","formattedTime","minutes","Math","floor","seconds","toFixed","msToMinutesAndSeconds","useEffect","current","Date","now","setInterval","accurateDelay","clearInterval","style","fontSize","textAlign","display","justifyContent","onClick","icon","faPlay","faPause","faPlus","faStop","App","console","log","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kKAkBeA,E,MAhBAC,EAAOC,OAAV,8Q,qBCyGGC,EApGG,WAAO,IAAD,EAEAC,IAAMC,SAAS,MAFf,mBAEdC,EAFc,KAEVC,EAFU,OAGMH,IAAMC,SAAS,MAHrB,mBAGdG,EAHc,KAGPC,EAHO,OAMkBL,IAAMC,UAAS,GANjC,mBAMdK,EANc,KAMDC,EANC,KAShBC,EAAcR,IAAMS,SAGpBC,EAAcV,IAAMS,SAS1B,SAASE,EAAYT,GACnB,IAAMU,EAPR,SAA+BV,GAC7B,IAAIW,EAAUC,KAAKC,MAAMb,EAAK,KAC1Bc,GAAYd,EAAK,IAAS,KAAMe,QAAQ,GAC5C,OAAOJ,EAAU,KAAOG,EAAU,GAAK,IAAM,IAAMA,EAI7BE,CAAsBhB,GAC5CG,EAASO,GAgDX,OA5CAZ,IAAMmB,WAAW,WACfR,EAAYT,KACX,IAGHF,IAAMmB,WAAW,WAEf,GAAGb,EAWD,OAVAE,EAAYY,QAAUC,KAAKC,MAC3BZ,EAAYU,QAAUG,aAAc,WAClC,IACMC,EADcH,KAAKC,MACWd,EAAYY,QAEhDjB,GAAO,SAAAD,GAAE,OAAIA,EAAKsB,KAClBb,EAAYT,KAEX,KAEI,WACLuB,cAAcf,EAAYU,YAI7B,CAACd,EAAaJ,IAsBf,qCACE,6BAAKA,IAEL,oBAAIwB,MAAO,CAAEC,SAAU,MAAOC,UAAW,UAAzC,SAAqDxB,IAErD,sBAAKsB,MAAO,CAAEG,QAAS,OAAQC,eAAgB,UAA/C,UACE,cAAC,EAAD,CAAQC,QAzBd,WACExB,GAAe,IAwBX,SACE,cAAC,IAAD,CAAiByB,KAAMC,QAGzB,cAAC,EAAD,CAAQF,QAzBd,WACExB,GAAe,IAwBX,SACE,cAAC,IAAD,CAAiByB,KAAME,QAGzB,cAAC,EAAD,CAAQH,QAzBd,WACE5B,GAAM,SAACD,GAAD,OAAQA,EAAK,QAwBf,SACE,cAAC,IAAD,CAAiB8B,KAAMG,QAGzB,cAAC,EAAD,CAAQJ,QAzBd,WACExB,GAAe,GACfJ,EAAM,MACNQ,EAAYT,IAsBR,SACE,cAAC,IAAD,CAAiB8B,KAAMI,eClFlBC,MAbf,WAIE,OAFAC,QAAQC,IAAI,SAGV,qBAAKC,UAAU,MAAf,SAEE,cAAC,EAAD,OCESC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.155a4933.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n  width: 60px;\r\n  height: 60px;\r\n  background-color: tomato;\r\n  border-color: tomato;\r\n  color: #fff;\r\n  font-size: 15px;\r\n  text-align: center;\r\n  line-height: 30px;\r\n  margin: 5px;\r\n  border-radius: 50%;\r\n  &:focus {\r\n    outline: 0;\r\n  }\r\n`;\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from '../Button';\r\n\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPause, faPlay, faPlus, faStop } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nconst Countdown = () => {\r\n  \r\n  const [ ms, setMs ] = React.useState(25*60*1000);\r\n  const [ timer, setTimer ] = React.useState(null);\r\n\r\n  // flag para saber se já está rodando o timer\r\n  const [ timerActive, setTimerActive ] = React.useState(false);\r\n\r\n  // referência para calcular delay\r\n  const initialTime = React.useRef();\r\n\r\n  // referencia setTinverval\r\n  const intervalRef = React.useRef();\r\n  \r\n\r\n  function msToMinutesAndSeconds(ms) {\r\n    var minutes = Math.floor(ms / 60000);\r\n    var seconds = ((ms % 60000) / 1000).toFixed(0);\r\n    return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds;\r\n  }\r\n\r\n  function updateTimer(ms) {\r\n    const formattedTime = msToMinutesAndSeconds(ms);\r\n    setTimer(formattedTime);\r\n  }\r\n\r\n\r\n  React.useEffect( () => {\r\n    updateTimer(ms);\r\n  }, []);\r\n \r\n\r\n  React.useEffect( () => {\r\n\r\n    if(timerActive) {\r\n      initialTime.current = Date.now();\r\n      intervalRef.current = setInterval ( ()=>{\r\n        const currentTime = Date.now();        \r\n        const accurateDelay = currentTime - initialTime.current;\r\n       \r\n        setMs( ms => ms - accurateDelay);\r\n        updateTimer(ms);\r\n\r\n      }, 1000);\r\n\r\n      return () => {\r\n        clearInterval(intervalRef.current);\r\n      }\r\n    }\r\n\r\n  }, [timerActive, ms])\r\n\r\n  \r\n  function startTimer() {\r\n    setTimerActive(true);\r\n  }\r\n   \r\n  function pauseTimer() {\r\n    setTimerActive(false);\r\n  }\r\n\r\n  function addOneMin() {\r\n    setMs((ms) => ms + 60000);\r\n  }\r\n  \r\n  function stopTimer() {\r\n    setTimerActive(false);\r\n    setMs(25*60*1000);\r\n    updateTimer(ms);\r\n  }\r\n\r\n  return (\r\n    <> \r\n      <h3>{ms}</h3>\r\n\r\n      <h1 style={{ fontSize: '6em', textAlign: 'center'}}>{timer}</h1>\r\n\r\n      <div style={{ display: 'flex', justifyContent: 'center'}}>\r\n        <Button onClick={startTimer} >\r\n          <FontAwesomeIcon icon={faPlay} />\r\n        </Button>\r\n\r\n        <Button onClick={pauseTimer} >\r\n          <FontAwesomeIcon icon={faPause} />\r\n        </Button>\r\n        \r\n        <Button onClick={addOneMin} >\r\n          <FontAwesomeIcon icon={faPlus} />\r\n        </Button>\r\n\r\n        <Button onClick={stopTimer} >\r\n          <FontAwesomeIcon icon={faStop} />\r\n        </Button>\r\n      </div>\r\n      \r\n    </>\r\n  )\r\n\r\n}\r\n\r\nexport default Countdown;","import React from 'react';\nimport Countdown from './components/Countdown';\n\nfunction App() {\n\n  console.log('teste');\n  \n  return (\n    <div className=\"App\">\n\n      <Countdown/>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}